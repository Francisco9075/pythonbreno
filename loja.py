# excecoes.py
class ProdutoInexistenteError(Exception):
    """Exce√ß√£o para produto n√£o encontrado no cat√°logo."""
    pass

class SaldoInsuficienteError(Exception):
    """Exce√ß√£o para saldo insuficiente ao tentar pagar."""
    pass

class CarrinhoVazioError(Exception):
    """Exce√ß√£o para tentativas de operar em um carrinho vazio."""
    pass



produtos = {
    "camiseta": {
        "preco": 50.0,
        "descricao": "Camiseta confort√°vel de algod√£o.",
        "disponibilidade": 100
    },
    "cal√ßas": {
        "preco": 80.0,
        "descricao": "Cal√ßas de jeans, dispon√≠veis em diversos tamanhos.",
        "disponibilidade": 100
    },
    "t√©nis": {
        "preco": 120.0,
        "descricao": "T√©nis esportivos, ideais para corridas.",
        "disponibilidade": 100
    },
    "bon√©": {
        "preco": 30.0,
        "descricao": "Bon√© esportivo para o ver√£o.",
        "disponibilidade": 100
    }
}

carrinho = {}
saldo = 200.0


def listar_produtos():
    print("\nüì¶ Produtos dispon√≠veis:")
    for nome, detalhes in produtos.items():
        print(f"- {nome.capitalize()} - {detalhes['preco']:.2f}‚Ç¨")
        print(f"  {detalhes['descricao']}")
        print(f"  Dispon√≠vel: {detalhes['disponibilidade']} unidades\n")


def adicionar_ao_carrinho():
    try:
        produto = input("üîπ Produto a adicionar: ").strip().lower()

        if produto not in produtos:
            raise ProdutoInexistenteError("Produto n√£o encontrado.")

        disponibilidade = produtos[produto]["disponibilidade"]
        if disponibilidade == 0:
            raise ValueError(f"'{produto}' est√° fora de estoque.")

        quantidade = input(f"üîπ Quantidade de '{produto}': ").strip()
        if not quantidade.isdigit() or int(quantidade) <= 0:
            raise ValueError("Quantidade deve ser um n√∫mero inteiro positivo.")
        quantidade = int(quantidade)

        if carrinho.get(produto, 0) + quantidade > disponibilidade:
            raise ValueError(f"Quantidade excede estoque dispon√≠vel ({disponibilidade}).")

    except (ProdutoInexistenteError, ValueError) as e:
        print(f"‚ùå Erro: {e}")
    else:
        carrinho[produto] = carrinho.get(produto, 0) + quantidade
        produtos[produto]["disponibilidade"] -= quantidade
        print(f"‚úÖ Adicionado {quantidade}x '{produto}' ao carrinho.")
    finally:
        print("üõí Opera√ß√£o finalizada.\n")


def remover_do_carrinho():
    try:
        if not carrinho:
            raise CarrinhoVazioError("N√£o √© poss√≠vel remover: o carrinho est√° vazio.")

        produto = input("üîπ Produto a remover: ").strip().lower()

        if produto not in carrinho:
            raise ValueError("Produto n√£o est√° no carrinho.")

        quantidade = input(f"üîπ Quantidade de '{produto}' para remover: ").strip()
        if not quantidade.isdigit() or int(quantidade) <= 0:
            raise ValueError("Quantidade inv√°lida.")
        quantidade = int(quantidade)

        if quantidade > carrinho[produto]:
            raise ValueError(f"S√≥ tem {carrinho[produto]} unidades de '{produto}' no carrinho.")

    except (CarrinhoVazioError, ValueError) as e:
        print(f"‚ùå Erro: {e}")
    else:
        carrinho[produto] -= quantidade
        produtos[produto]["disponibilidade"] += quantidade
        if carrinho[produto] == 0:
            del carrinho[produto]
        print(f"‚úÖ Removido {quantidade}x '{produto}' do carrinho.")
    finally:
        print("üõí Opera√ß√£o finalizada.\n")


def mostrar_carrinho():
    try:
        if not carrinho:
            raise ValueError("Carrinho est√° vazio.")

        print("\nüõçÔ∏è  Carrinho de compras:")
        total = 0
        for produto, qtd in carrinho.items():
            subtotal = produtos[produto]["preco"] * qtd
            print(f"- {qtd}x {produto} - {subtotal:.2f}‚Ç¨")
            total += subtotal
        print(f"üí∞ Total: {total:.2f}‚Ç¨")

    except ValueError as e:
        print(f"‚ùå {e}")
    finally:
        print("üõí Consulta finalizada.\n")


def consultar_saldo():
    print(f"\nüíº Saldo atual: {saldo:.2f}‚Ç¨\n")


def adicionar_saldo():
    global saldo
    try:
        valor = input("üîπ Valor a adicionar: ").replace(",", ".").strip()
        valor = float(valor)
        if valor <= 0:
            raise ValueError("Valor deve ser positivo.")
    except ValueError as e:
        print(f"‚ùå Erro: {e}")
    else:
        saldo += valor
        print(f"‚úÖ Novo saldo: {saldo:.2f}‚Ç¨")
    finally:
        print("üíº Opera√ß√£o conclu√≠da.\n")


def simular_pagamento():
    global saldo
    try:
        if not carrinho:
            raise ValueError("Carrinho est√° vazio.")

        total = sum(produtos[produto]["preco"] * qtd for produto, qtd in carrinho.items())
        if total > saldo:
            raise SaldoInsuficienteError("Saldo insuficiente para finalizar a compra.")

    except (ValueError, SaldoInsuficienteError) as e:
        print(f"‚ùå Erro: {e}")
    else:
        saldo -= total
        carrinho.clear()
        print(f"‚úÖ Pagamento efetuado com sucesso! Novo saldo: {saldo:.2f}‚Ç¨")
    finally:
        print("üí≥ Pagamento conclu√≠do.\n")


def menu():
    while True:
        print("===== üõçÔ∏è Loja Virtual =====")
        print("1. Ver produtos")
        print("2. Adicionar ao carrinho")
        print("3. Remover do carrinho")
        print("4. Ver carrinho")
        print("5. Consultar saldo")
        print("6. Adicionar saldo")
        print("7. Efetuar pagamento")
        print("8. Sair")

        try:
            opcao = input("Escolha uma op√ß√£o: ").strip()

            match opcao:
                case "1":
                    listar_produtos()
                case "2":
                    adicionar_ao_carrinho()
                case "3":
                    remover_do_carrinho()
                case "4":
                    mostrar_carrinho()
                case "5":
                    consultar_saldo()
                case "6":
                    adicionar_saldo()
                case "7":
                    simular_pagamento()
                case "8":
                    print("üëã Obrigado por visitar nossa loja!")
                    break
                case _:
                    raise ValueError("Op√ß√£o inv√°lida.")
        except ValueError as e:
            print(f"‚ùå Erro: {e}")
        finally:
            print("-----------------------------\n")


if __name__ == "__main__":
    menu()
